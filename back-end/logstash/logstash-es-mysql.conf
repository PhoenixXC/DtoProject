input{
    stdin {
             
    }
jdbc {
		# 驱动方式
		jdbc_driver_library => "/opt/logstash/mysql-connector-java-8.0.11.jar"
		# 驱动类名
		jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
		# mysql 数据库链接,blog为数据库名 &useSSL=false 这个是为了防止不支持ssl连接的问题
		jdbc_connection_string => "jdbc:mysql://localhost:3306/elmqx?characterEncoding=utf8&useSSL=false"
		# 连接数据库用户名
		jdbc_user => "root"
		# 连接数据库密码
		jdbc_password => "mysqlpass"
		# 是否启用分页
		jdbc_paging_enabled => "true"
		jdbc_page_size => "50000"
		# 设置监听间隔  各字段含义（由左至右）分、时、天、月、年，全部为*默认含>义为每分钟都更新
		schedule => "* * * * * "
		type => "jdbc"
		# 执行sql文路径及名称
		# statement_filepath => "./*.sql"
		# 直接写sql语句用这个
		statement => "
		    SELECT 
            restaurant.*, 
            (
                SELECT 
                    GROUP_CONCAT(food.name) 
                FROM 
                    food 
                WHERE 
                    food.restaurant_id = restaurant_id
            
            ) AS foods 
            FROM 
                restaurant
        "
		 # use_column_value => true
		 # tracking_column => "updatetime"
		 # 保存上一次运行>的信息(tracking_column)
		 # last_run_metadata_path => "./logstash_jdbc_last_run"
    
    }

}

filter{

    mutate {
        add_field => {
            "[location][lat]" => "%{addr_lat}"
            "[location][lon]" => "%{addr_lng}"
        }
    }

    mutate {
        convert => {
            "[location][lat]" => "float"
            "[location][lon]" => "float"
        }
    }
    
    mutate {
        split => {"foods" => ","}
        split => {"tag" => ","}
    }
}

#output插件配置
output{
    elasticsearch {
		#这里可以是数组，可以是多个节点的地址，会自动启用负载均衡
		hosts => ["127.0.0.1:9200"]
		#index名称
		index => "restaurant"
		template => "/opt/logstash/conf/map_template.json"
		# manage_template => false
		template_name => "shop"
		template_overwrite => "true"
		#文档id，必须设置，且表达式的变量存在，否则只>能插入一条记录
		document_id => "%{restaurant_id}"
    }
    
    #控制台打印json
    stdout {
        codec => json_lines
    }
     
}
